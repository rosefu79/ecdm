// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bijectionvector
arma::vec bijectionvector(unsigned int K);
RcppExport SEXP ecdm_bijectionvector(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(bijectionvector(K));
    return rcpp_result_gen;
END_RCPP
}
// inv_bijectionvector
arma::vec inv_bijectionvector(unsigned int K, double CL);
RcppExport SEXP ecdm_inv_bijectionvector(SEXP KSEXP, SEXP CLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type CL(CLSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_bijectionvector(K, CL));
    return rcpp_result_gen;
END_RCPP
}
// ETAmat
arma::mat ETAmat(unsigned int K, unsigned int J, const arma::mat& Q);
RcppExport SEXP ecdm_ETAmat(SEXP KSEXP, SEXP JSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(ETAmat(K, J, Q));
    return rcpp_result_gen;
END_RCPP
}
// ETAmat_nok
arma::cube ETAmat_nok(unsigned int K);
RcppExport SEXP ecdm_ETAmat_nok(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(ETAmat_nok(K));
    return rcpp_result_gen;
END_RCPP
}
// ETAmat_nok_one_m_ac
arma::cube ETAmat_nok_one_m_ac(unsigned int K);
RcppExport SEXP ecdm_ETAmat_nok_one_m_ac(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(ETAmat_nok_one_m_ac(K));
    return rcpp_result_gen;
END_RCPP
}
// abcount_old
arma::vec abcount_old(unsigned int K, unsigned int k, const arma::vec& qj, const arma::vec& Yj, const arma::mat& alpha);
RcppExport SEXP ecdm_abcount_old(SEXP KSEXP, SEXP kSEXP, SEXP qjSEXP, SEXP YjSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type qj(qjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Yj(YjSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(abcount_old(K, k, qj, Yj, alpha));
    return rcpp_result_gen;
END_RCPP
}
// abcounts
arma::vec abcounts(unsigned int N, const arma::vec& Yj, const arma::vec& CLASS, const arma::vec& ETAtnokimes1ma);
RcppExport SEXP ecdm_abcounts(SEXP NSEXP, SEXP YjSEXP, SEXP CLASSSEXP, SEXP ETAtnokimes1maSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Yj(YjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CLASS(CLASSSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ETAtnokimes1ma(ETAtnokimes1maSEXP);
    rcpp_result_gen = Rcpp::wrap(abcounts(N, Yj, CLASS, ETAtnokimes1ma));
    return rcpp_result_gen;
END_RCPP
}
// ClassbyQmat
arma::mat ClassbyQmat(unsigned int K);
RcppExport SEXP ecdm_ClassbyQmat(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(ClassbyQmat(K));
    return rcpp_result_gen;
END_RCPP
}
// llj
double llj(unsigned int N, const arma::vec& Yj, const arma::vec& ETAj, const arma::vec& CLASS, double gj, double sj);
RcppExport SEXP ecdm_llj(SEXP NSEXP, SEXP YjSEXP, SEXP ETAjSEXP, SEXP CLASSSEXP, SEXP gjSEXP, SEXP sjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Yj(YjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ETAj(ETAjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CLASS(CLASSSEXP);
    Rcpp::traits::input_parameter< double >::type gj(gjSEXP);
    Rcpp::traits::input_parameter< double >::type sj(sjSEXP);
    rcpp_result_gen = Rcpp::wrap(llj(N, Yj, ETAj, CLASS, gj, sj));
    return rcpp_result_gen;
END_RCPP
}
// lnlik_dina_condclass
double lnlik_dina_condclass(unsigned int N, unsigned int J, const arma::mat& Y, const arma::mat& ETA, const arma::vec& CLASS, const arma::vec& pis, const arma::vec& gs, const arma::vec& ss);
RcppExport SEXP ecdm_lnlik_dina_condclass(SEXP NSEXP, SEXP JSEXP, SEXP YSEXP, SEXP ETASEXP, SEXP CLASSSEXP, SEXP pisSEXP, SEXP gsSEXP, SEXP ssSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ETA(ETASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CLASS(CLASSSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pis(pisSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ss(ssSEXP);
    rcpp_result_gen = Rcpp::wrap(lnlik_dina_condclass(N, J, Y, ETA, CLASS, pis, gs, ss));
    return rcpp_result_gen;
END_RCPP
}
// pYjeq1
double pYjeq1(const arma::vec& ETAbyQ, const arma::vec& pis, double nClass, double sj, double gj);
RcppExport SEXP ecdm_pYjeq1(SEXP ETAbyQSEXP, SEXP pisSEXP, SEXP nClassSEXP, SEXP sjSEXP, SEXP gjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ETAbyQ(ETAbyQSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pis(pisSEXP);
    Rcpp::traits::input_parameter< double >::type nClass(nClassSEXP);
    Rcpp::traits::input_parameter< double >::type sj(sjSEXP);
    Rcpp::traits::input_parameter< double >::type gj(gjSEXP);
    rcpp_result_gen = Rcpp::wrap(pYjeq1(ETAbyQ, pis, nClass, sj, gj));
    return rcpp_result_gen;
END_RCPP
}
// pYit
double pYit(const arma::vec& ETA_it, const arma::vec& Y_it, const arma::vec& ss, const arma::vec& gs);
RcppExport SEXP ecdm_pYit(SEXP ETA_itSEXP, SEXP Y_itSEXP, SEXP ssSEXP, SEXP gsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ETA_it(ETA_itSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y_it(Y_itSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gs(gsSEXP);
    rcpp_result_gen = Rcpp::wrap(pYit(ETA_it, Y_it, ss, gs));
    return rcpp_result_gen;
END_RCPP
}
// lnlik_dina
double lnlik_dina(unsigned int N, unsigned int J, unsigned int nClass, const arma::mat& Y, const arma::mat& ETA, const arma::vec& pis, const arma::vec& gs, const arma::vec& ss);
RcppExport SEXP ecdm_lnlik_dina(SEXP NSEXP, SEXP JSEXP, SEXP nClassSEXP, SEXP YSEXP, SEXP ETASEXP, SEXP pisSEXP, SEXP gsSEXP, SEXP ssSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nClass(nClassSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ETA(ETASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pis(pisSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ss(ssSEXP);
    rcpp_result_gen = Rcpp::wrap(lnlik_dina(N, J, nClass, Y, ETA, pis, gs, ss));
    return rcpp_result_gen;
END_RCPP
}
// random_Q
arma::mat random_Q(unsigned int J, unsigned int K);
RcppExport SEXP ecdm_random_Q(SEXP JSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(random_Q(J, K));
    return rcpp_result_gen;
END_RCPP
}
// identify_check
double identify_check(const arma::mat Q);
RcppExport SEXP ecdm_identify_check(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_check(Q));
    return rcpp_result_gen;
END_RCPP
}
// updateQ_DINA
void updateQ_DINA(arma::mat& Q, const arma::mat& Y, const arma::mat& alpha, const arma::vec& ss, const arma::vec& gs);
RcppExport SEXP ecdm_updateQ_DINA(SEXP QSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP ssSEXP, SEXP gsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gs(gsSEXP);
    updateQ_DINA(Q, Y, alpha, ss, gs);
    return R_NilValue;
END_RCPP
}
// updateQ_DINA_new
void updateQ_DINA_new(unsigned int N, unsigned int K, unsigned int J, arma::mat& Q, const arma::mat& Y, const arma::vec& CLASS, const arma::vec& ss, const arma::vec& gs, const arma::vec& vj, const arma::cube& ETAmatnok, const arma::mat& a_by_q, const arma::vec& vv);
RcppExport SEXP ecdm_updateQ_DINA_new(SEXP NSEXP, SEXP KSEXP, SEXP JSEXP, SEXP QSEXP, SEXP YSEXP, SEXP CLASSSEXP, SEXP ssSEXP, SEXP gsSEXP, SEXP vjSEXP, SEXP ETAmatnokSEXP, SEXP a_by_qSEXP, SEXP vvSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CLASS(CLASSSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vj(vjSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type ETAmatnok(ETAmatnokSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a_by_q(a_by_qSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vv(vvSEXP);
    updateQ_DINA_new(N, K, J, Q, Y, CLASS, ss, gs, vj, ETAmatnok, a_by_q, vv);
    return R_NilValue;
END_RCPP
}
// cond_threshold
double cond_threshold(unsigned int k, unsigned int j, unsigned int n_noks, unsigned int N, unsigned int K, const arma::vec& Yj, const arma::vec& CLASS, const arma::mat& Q, double gj, double sj, const arma::cube& ETAmatnok);
RcppExport SEXP ecdm_cond_threshold(SEXP kSEXP, SEXP jSEXP, SEXP n_noksSEXP, SEXP NSEXP, SEXP KSEXP, SEXP YjSEXP, SEXP CLASSSEXP, SEXP QSEXP, SEXP gjSEXP, SEXP sjSEXP, SEXP ETAmatnokSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type j(jSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_noks(n_noksSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Yj(YjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CLASS(CLASSSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type gj(gjSEXP);
    Rcpp::traits::input_parameter< double >::type sj(sjSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type ETAmatnok(ETAmatnokSEXP);
    rcpp_result_gen = Rcpp::wrap(cond_threshold(k, j, n_noks, N, K, Yj, CLASS, Q, gj, sj, ETAmatnok));
    return rcpp_result_gen;
END_RCPP
}
// sim_Y_dina
arma::mat sim_Y_dina(unsigned int N, unsigned int J, const arma::vec& CLASS, const arma::mat& ETA, const arma::vec& gs, const arma::vec& ss);
RcppExport SEXP ecdm_sim_Y_dina(SEXP NSEXP, SEXP JSEXP, SEXP CLASSSEXP, SEXP ETASEXP, SEXP gsSEXP, SEXP ssSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CLASS(CLASSSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ETA(ETASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ss(ssSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_Y_dina(N, J, CLASS, ETA, gs, ss));
    return rcpp_result_gen;
END_RCPP
}
// parm_update_nomiss
void parm_update_nomiss(unsigned int N, unsigned int J, unsigned int K, unsigned int nClass, const arma::mat& Y, const arma::mat& ETA, arma::vec& gs, arma::vec& ss, arma::vec& CLASS, arma::vec& pis);
RcppExport SEXP ecdm_parm_update_nomiss(SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP nClassSEXP, SEXP YSEXP, SEXP ETASEXP, SEXP gsSEXP, SEXP ssSEXP, SEXP CLASSSEXP, SEXP pisSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nClass(nClassSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ETA(ETASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type CLASS(CLASSSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pis(pisSEXP);
    parm_update_nomiss(N, J, K, nClass, Y, ETA, gs, ss, CLASS, pis);
    return R_NilValue;
END_RCPP
}
// OddsRatio
arma::mat OddsRatio(unsigned int N, unsigned int J, const arma::mat& Yt);
RcppExport SEXP ecdm_OddsRatio(SEXP NSEXP, SEXP JSEXP, SEXP YtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Yt(YtSEXP);
    rcpp_result_gen = Rcpp::wrap(OddsRatio(N, J, Yt));
    return rcpp_result_gen;
END_RCPP
}
// dina_Gibbs_Q
Rcpp::List dina_Gibbs_Q(const arma::mat& Y, unsigned int K, unsigned int burnin, unsigned int chain_length);
RcppExport SEXP ecdm_dina_Gibbs_Q(SEXP YSEXP, SEXP KSEXP, SEXP burninSEXP, SEXP chain_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chain_length(chain_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(dina_Gibbs_Q(Y, K, burnin, chain_length));
    return rcpp_result_gen;
END_RCPP
}
